import torch
import torch.nn as nn
import numpy as np
import random
import torch.optim as optim
from torch.utils.data import TensorDataset, DataLoader, random_split

# dtype = torch.float32

from torch.optim.lr_scheduler import StepLR, ReduceLROnPlateau
    
def build_network(layer_sizes):
    """
    This function is used to generate a fully connected neural network

    Args:
        layer_sizes (list of int): A list of integer representing the number of nodes in each layer

    Returns:
        torch.nn.Sequential: A sequential neural network model composed of linear layers and
        ReLU activations (except for the output layer).
    """
    layers = []
    for i in range(len(layer_sizes) - 1):
        layers.append(nn.Linear(layer_sizes[i], layer_sizes[i + 1]))  # Fully connected layer
        if i < len(layer_sizes) - 2:  # No activation for last layer
            #layers.append(nn.ReLU())  # Activation function (can be modified)
            layers.append(nn.Tanh())
            
    
    return nn.Sequential(*layers)

class NeuralNet(nn.Module):
    """
    A fully connected feedforward neural network (multi-layer perceptron).

    Args:
        nn (class): Base class of neural network. It is a parent class of the current class.
    """
    
    def __init__(self, layer_sizes):
        """
        Constructor Method for the NeuralNet class

        Args:
            layer_sizes (list of int): A list of integer representing the number of nodes in each layers.
        """
        super(NeuralNet, self).__init__() # Initialialise the parent class
        self.network = build_network(layer_sizes)  # Use the dynamic builder

    def forward(self, x):
        """
        It is used to represet the neural network. 

        Args:
            x (float): Input to the neural network

        Returns:
            float: Output of the neural network
        """
        return self.network(x)
    
def M_norm(u, v, M):
    """
    This function is used to generate the scalar product of u and v
    w.r.t wieghted mass matrix M i.e (u,v)_M = u^T M v

    Args:
        u (float):  A vector or 1D tesnor
        v (float):  A vector or 1D tesnor
        M (float):  A matrix or 2D tensor

    Returns:
        float: scalar product of two vector w.r.t mass matrix
    """
    u_T_M = torch.matmul(u,M)
    u_T_M_v = torch.matmul(u_T_M, v)
    
    return u_T_M_v

def L2_accuracy(true_Data, nueral_network_output, M):
    """
    This function is used to calculate the L2 norm accuracy. 
    L2_accuracy = 1 - sqrt(E[||true_data - neural_networ_output||_2^2/||true_data||_2^2])

    Args:
        true_Data (float): True output data
        nueral_network_output (float): Output from the neural network

    Returns:
        float: accuracy between the true data and the output of the neural network
    """
   
    # Find the expectation of relative error norm. 
    
    
    RL=0
    for i in range(true_Data.shape[0]):
        RL += (M_norm(true_Data[i]- nueral_network_output[i], true_Data[i]- nueral_network_output[i], M))/ (M_norm(true_Data[i], true_Data[i], M)+1e-8)
    Expecation_RL = RL/true_Data.shape[0]
    L2_error = 1- torch.sqrt(Expecation_RL)
    return L2_error


    
def custom_loss_without_grad(output_PDE, outputs_NN, M=None):
    """
    Loss function without using the gradient information. 
    Loss = E[||output_PDE - output_NN||^2_2]
    Args:
        output_PDE (float): State solution of the PDE
        outputs_NN (float): Output generated by Neural Network

    Returns:
        float: Expected L2 square loss
    """
    
    N, D = outputs_NN.shape 
    del_u = output_PDE - outputs_NN
    # Step 1: reshape del_u to [N, 1, m] so we can use bmm
    del_u_reshaped = del_u.unsqueeze(1)
    # Step 2: compute del_u @ M => [N, 1, m] @ [m, m] = [N, 1, m]
    u_T_M = torch.matmul(del_u_reshaped, M)
    # Step 3: compute u.T M @ u => [N, 1, m] @ [N, m, 1] = [N, 1, 1]
    u = del_u.unsqueeze(2)  # [N, m, 1]
    result = torch.bmm(u_T_M, u)  # [N, 1, 1]
    result_batch = result.squeeze()
    
    total_loss = torch.mean(result_batch)
    return total_loss

def calulate_matrix_norm_square(output_grad_PDE, output_final, M):
    """
    Loss function between two Jacobain using matrix norm. 
    Loss = E[|| output_grad_PDE - output_final||_F^2 ]

    Args:
        output_grad_PDE (float): Sensitivity Jacobain, du/dk
        output_final (float): Jocobian matrix of Neural network output w.r.t to input

    Returns:
        float: Expectation of Matrix norm square
    """
    
    A = output_final - output_grad_PDE
    # A: [N, m, n]
    # M: [m, m]
    N, D, _ = A.shape
    # Step 1: Compute MA: [N, m, n]
    # MA = torch.matmul(M, A)  # M @ A_i for each batch
   
    # Step 2: Compute A^T @ MA: [N, n, n]
    # At_M_A = torch.matmul(A.transpose(1, 2), MA)
    
    # # Step 3: Take trace of each [n, n] matrix
    # weighted_fro_norm_sq = torch.einsum('bii->b', At_M_A) /N
    
    At_M_A_2 = torch.einsum('bmi, mk, bkj->bij', A, M , A)
    weighted_fro_norm_sq_2 = torch.einsum('bii->b', At_M_A_2) /N
    
    return weighted_fro_norm_sq_2

def calculate_jacobian_full(inputs, outputs_NN):
    """
    Calculate the full Jacobian matrix of the output of the neural network, w.r.t input of the neural network

    Args:
        inputs (float): Input of the Neural Network
        outputs_NN (float): Output of the Neural Network

    Returns:
        float: Jacobian matrix
    """
    
    # Ensure input requires gradients
    outputs =  outputs_NN
    
    jacobian_list = []
    for i in range(outputs.shape[1]):  # Loop over each output dimension
        grad_outputs = torch.zeros_like(outputs)
        grad_outputs[:, i] = 1.0  # Compute gradient for one output at a time

        # Retain graph so it can be used for loss.backward()
        jacobian_row = torch.autograd.grad(outputs, inputs, grad_outputs=grad_outputs,
                                        retain_graph=True, create_graph=True)[0]

        jacobian_list.append(jacobian_row)
    
    jacobian_matrix = torch.stack(jacobian_list, dim=1)  # Shape: [batch_size, output_dim, input_dim]
    
    return jacobian_matrix

def calculate_jacobian(U_k, inputs, outputs_NN):
    """
    
    Calculate the Jacobian matrix of the transformed output of the neural network, w.r.t input of the neural network
    
    Args:
        U_k (float): A matrix formed by k random eigenvectors forms by POD of state variable of output of PDE
        inputs (float): Input of the Neural Network
        outputs_NN (float): Output of the Neural Network

    Returns:
        float: Jacobian matrix
    """
    
    
    # Ensure input requires gradients
    
    outputs = torch.einsum("ab, cb->ca", U_k, outputs_NN)
    
    #print(outputs.shape)
    jacobian_list = []
    for i in range(outputs.shape[1]):  # Loop over each output dimension
        grad_outputs = torch.zeros_like(outputs)
        grad_outputs[:, i] = 1.0  # Compute gradient for one output at a time

        # Retain graph so it can be used for loss.backward()
        jacobian_row = torch.autograd.grad(outputs, inputs, grad_outputs=grad_outputs,
                                        retain_graph=True, create_graph=True)[0]

        jacobian_list.append(jacobian_row)
    
    jacobian_matrix = torch.stack(jacobian_list, dim=1)  # Shape: [batch_size, output_dim, input_dim]
    
    return jacobian_matrix
    
class NN_setup():
    def __init__(self, Gempy_Inputs, PDE_outputs, Jacobian, Decoder_matrix, bias, Mass_Matrix, Model="s", dtype=torch.float32):
        """
        Constructor Method for the NeuralNet class

        Args:
            Gempy_Inputs (float) : Input paramter for the Gempy. It has shape (N x dK), 
            PDE_outputs (float)  : Output of the PDE. It has the shape (N x dU). 
            Jacobian (float)     : Jacobian matrix of the output of PDE w.r.t inpput of Gempy. It has shape (N x dU x dK).
            Decoder_matrix (float) : Transformation Matrix to transform the data from lower dimension to orignial space. 
                                     It has shape (dU x dr). 
            bias (float)        :   It is average of the data in original space. It has shape (dU,)
            Mass_Matrix (float) :  It is the mass matrix for the POD. It has the shape (dU x dU).
            Model (string)      : If I want to run the same model or different (s or o).
            
        """
        
        super(NN_setup, self).__init__() # Initialialise the parent class
        if torch.backends.mps.is_available() and torch.backends.mps.is_built():
            self.device = torch.device("mps")
            print("Using MPS device")
        elif torch.cuda.is_available():
            self.device = torch.device("cuda")
            print("Using CUDA device")
        else:
            self.device = torch.device("cpu")
            print("Using CPU device")
            
        self.dtype  = dtype
        
        ###############################################################################
        # Seed the randomness 
        ###############################################################################
        self.seed = 42   
        random.seed(self.seed)
        np.random.seed(self.seed)        
        torch.manual_seed(self.seed)
        if torch.cuda.is_available():
            torch.cuda.manual_seed_all(self.seed)
        # Ensure deterministic behavior
        torch.backends.cudnn.deterministic = True
        torch.backends.cudnn.benchmark = False
        
        # Create a generator for deterministic behavior
        g = torch.Generator()
        g.manual_seed(self.seed)

        self.Model = Model
        self.Gempy_Inputs = torch.tensor(Gempy_Inputs, dtype=self.dtype, device=self.device)
        self.PDE_outputs = torch.tensor(PDE_outputs, dtype=self.dtype, device=self.device)
        self.Jacobian = torch.tensor(Jacobian, dtype=self.dtype, device=self.device)
        # self.Encoder_matrix = torch.tensor(Encoder_matrix, dtype=self.dtype, device=self.device)
        self.Decoder_matrix = torch.tensor(Decoder_matrix, dtype=self.dtype, device=self.device)
        self.bias = torch.tensor(bias, dtype=self.dtype, device=self.device)
        self.Mass_matrix = torch.tensor(Mass_Matrix, dtype=self.dtype, device=self.device)
        
        ######################################################################################
        # Create the Dataset for Neural network
        ######################################################################################
        dataset = TensorDataset(self.Gempy_Inputs, self.PDE_outputs, self.Jacobian)
        N, _, _ = self.Jacobian.shape
    
        train_size = int(0.6 * N)
        valid_size = int(0.2 * N)
        test_size = N - train_size - valid_size

        # Randomly split dataset
        train_dataset, valid_dataset, test_dataset = random_split(dataset, [train_size, valid_size, test_size], generator=g)
        
        # Create DataLoaders
        self.train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True, generator=g, num_workers=0)
        self.valid_loader = DataLoader(valid_dataset, batch_size=32, shuffle = False, num_workers=0)
        self.test_loader = DataLoader(test_dataset, batch_size=test_size, shuffle=False,num_workers=0)
        
        # Check sizes
        print(f"Train size: {len(train_dataset)},Valid size: {len(valid_dataset)},  Test size: {len(test_dataset)}")
        
    def train_network_M2(self, layer_sizes, num_epochs,  lr=0.002):
        """
        This function is used to train the neural network under various conditions. 

        Args:
            Gempy_Inputs (float): Input data to train the network
            PDE_outputs (float): True output data is the solution of the PDE
            Jacobian (float): Sensitivity of the state variable w.r.t input of the Gempy
            layer_sizes (list of int): Network architecture
            num_epochs (int): Number of epochs for the network training
            
        """
        ######################################################################################
        # Instantiate model
        ######################################################################################
        
        self.model = NeuralNet(layer_sizes=layer_sizes).to(dtype=self.dtype)
        self.model.to(self.device)
        
        optimizer = optim.Adam(self.model.parameters(), lr=lr)
        
        # -------------------------------
        # Training Loop with Loss Tracking
        # -------------------------------
        num_epochs = num_epochs
        train_losses = []
        val_losses = []
        
        for epoch in range(num_epochs):
            self.model.train()  # Set model to training mode
            epoch_train_loss = 0

            for inputs, output_PDE , output_grad_PDE in self.train_loader:
                optimizer.zero_grad()
                outputs_NN = self.model(inputs)  # Forward pass
                outputs = torch.matmul(outputs_NN, self.Decoder_matrix.T ) + self.bias
                loss = custom_loss_without_grad(output_PDE, outputs, self.Mass_matrix) 
                loss.backward()  # Backpropagation
                optimizer.step()  # Update weights
                epoch_train_loss += loss.item()
            
            epoch_train_loss /= len(self.train_loader)
            train_losses.append(epoch_train_loss)
            
            # -------------------------------
            # Evaluate on Validation (Test) Set
            # -------------------------------
            self.model.eval()  # Set model to evaluation mode
            epoch_val_loss = 0

            with torch.no_grad():
                for inputs, output_PDE , output_grad_PDE in self.valid_loader:
                    outputs_NN = self.model(inputs)
                    outputs = torch.matmul(outputs_NN, self.Decoder_matrix.T ) + self.bias
                    loss = custom_loss_without_grad(output_PDE, outputs, self.Mass_matrix)
                    epoch_val_loss += loss.item()
                    
            # Compute average validation loss
            epoch_val_loss /= len(self.test_loader)
            val_losses.append(epoch_val_loss)

            # Print progress every 10 epochs
            if epoch % 10 == 0 :
                print(f"Epoch [{epoch}/{num_epochs}], Train Loss: {epoch_train_loss:.4f}, Val Loss: {epoch_val_loss:.4f}")
            elif epoch ==(num_epochs-1):
                print(f"Epoch [{epoch}/{num_epochs}], Train Loss: {epoch_train_loss:.4f}, Val Loss: {epoch_val_loss:.4f}")
            
            
        self.model.eval()  # Set model to evaluation mode
        
        for inputs, output_PDE , output_grad_PDE in self.test_loader:
            inputs, output_PDE , output_grad_PDE = inputs, output_PDE , output_grad_PDE  # Ensure float32
            inputs.requires_grad_(True)
            outputs_NN = self.model(inputs)
            outputs = torch.matmul(outputs_NN, self.Decoder_matrix.T ) + self.bias
            L_2_1 = L2_accuracy(true_Data=output_PDE , nueral_network_output=outputs.detach(), M=self.Mass_matrix)
            print("L2 accuracy without Jacobian: ",L_2_1)
            Jacobian_NN = calculate_jacobian_full(inputs, outputs_NN)
            Jacobian_output = torch.einsum("ca,nab->ncb",self.Decoder_matrix, Jacobian_NN.detach() )
            
            Frobenius_norm = calulate_matrix_norm_square(output_grad_PDE, Jacobian_output, self.Mass_matrix) 
            A_T_M_A = torch.einsum("bmi, mk, bkj->bij", output_grad_PDE, self.Mass_matrix, output_grad_PDE)
            true_matrix_norm = torch.einsum("bii->b", A_T_M_A) + 1e-8
            H1 = 1 - torch.sqrt(torch.sum((Frobenius_norm)/true_matrix_norm))
            print("H1 accuracy : ", H1)
            
            
        #torch.save(self.model, "./saved_model/model_without_jacobian.pth")
        ################################################################################
        # Find the result just based on L2 norm of output of NN and and reduced basis
        # and respespect to Derivative
        # || q(k) - f_\theta(k)||_2^2 + || D(q(k)) - D(f_\theta(k))||_2^2
        ################################################################################
        # Instantiate model
    def train_network_Jacobian_full(self, layer_sizes, num_epochs, scale_factor=1, lr=0.002 ):
        if self.Model == "s":
            model = self.model
        else:
            model = NeuralNet(layer_sizes=layer_sizes).to(dtype=self.dtype)
            model.to(self.device)
        optimizer = optim.Adam(model.parameters(), lr=lr)
        #scheduler = ReduceLROnPlateau(optimizer, mode='min', factor=0.1, patience=5)
        #scheduler = StepLR(optimizer, step_size=280, gamma=0.1)  # Reduce LR every 10 epochs by a factor of 0.1
        train_losses = []
        val_losses = []
        L_2 = []
        F_2 = []
        a=scale_factor
        
        for epoch in range(num_epochs):
            model.train()  # Set model to training mode
            epoch_train_loss = 0
            epoch_L2_loss = 0
            epoch_F2_loss = 0

            for inputs, output_PDE , output_grad_PDE in self.train_loader:
                optimizer.zero_grad()
                # 🔥 Ensure inputs track gradients before computing Jacobian
                inputs.requires_grad_(True)
                outputs_NN = model(inputs)  # Forward pass
                outputs = torch.matmul(outputs_NN, self.Decoder_matrix.T ) + self.bias
                L_2_loss = custom_loss_without_grad(output_PDE, outputs, M=self.Mass_matrix)/2
                Jacobian_NN = calculate_jacobian_full(inputs, outputs_NN)
                Jacobian_output = torch.einsum("ca,nab->ncb",self.Decoder_matrix, Jacobian_NN )
                Frobenius_norm = calulate_matrix_norm_square(output_grad_PDE, Jacobian_output, self.Mass_matrix) 
                F_2_loss =  torch.sum(Frobenius_norm)/2
                loss = (L_2_loss + a *  F_2_loss)
                loss.backward()  # Backpropagation
                optimizer.step()  # Update weights
                epoch_train_loss += loss.item()
                epoch_L2_loss    += L_2_loss.item()
                epoch_F2_loss    += F_2_loss.item()
                
            # Compute average training loss
            
            epoch_train_loss /= len(self.train_loader)
            epoch_L2_loss  /= len(self.train_loader)
            epoch_F2_loss  /= len(self.train_loader)
            train_losses.append(epoch_train_loss)
            L_2.append(epoch_L2_loss)
            F_2.append(epoch_F2_loss)
            # -------------------------------
            # Step 5: Evaluate on Validation (Test) Set
            # -------------------------------
            model.eval()  # Set model to evaluation mode
            epoch_val_loss = 0

            #with torch.no_grad():
            for inputs, output_PDE , output_grad_PDE in self.valid_loader:
                inputs.requires_grad_(True)
                outputs_NN = model(inputs)
                outputs = torch.matmul(outputs_NN, self.Decoder_matrix.T ) + self.bias
                L_2_loss = custom_loss_without_grad(output_PDE, outputs, M=self.Mass_matrix)/2
                Jacobian_NN = calculate_jacobian_full(inputs, outputs_NN)
                Jacobian_output = torch.einsum("ca,nab->ncb",self.Decoder_matrix, Jacobian_NN )
                Frobenius_norm = calulate_matrix_norm_square(output_grad_PDE, Jacobian_output, self.Mass_matrix) 
                F_2_loss =  torch.sum(Frobenius_norm)/2
                loss = (L_2_loss +  a * F_2_loss)
                epoch_val_loss += loss.item()

            # Compute average validation loss
            epoch_val_loss /= len(self.valid_loader)
            val_losses.append(epoch_val_loss)
            #scheduler.step(epoch_val_loss)
            # scheduler.step()
            # Print progress every 10 epochs
            if epoch % 10 == 0 :
                print(f"Epoch [{epoch}/{num_epochs}], Train Loss: {epoch_train_loss:.4f}, Val Loss: {epoch_val_loss:.4f}, L2 Loss: {epoch_L2_loss:.4f}, F2 Loss: {epoch_F2_loss:.4f}")
            elif epoch ==(num_epochs-1):
                print(f"Epoch [{epoch}/{num_epochs}], Train Loss: {epoch_train_loss:.4f}, Val Loss: {epoch_val_loss:.4f}, L2 Loss: {epoch_L2_loss:.4f}, F2 Loss: {epoch_F2_loss:.4f}")
        
        # -------------------------------
        # Test data: Find accuracies
        # -------------------------------
        model.eval()  # Set model to evaluation mode
    
        for inputs, output_PDE , output_grad_PDE in self.test_loader:
            inputs.requires_grad_(True)
        
            outputs_NN = model(inputs)
            outputs = torch.matmul(outputs_NN, self.Decoder_matrix.T) + self.bias
            
            L_2 = L2_accuracy(true_Data=output_PDE , nueral_network_output=outputs.detach(), M=self.Mass_matrix)
            print("L2 accuracy with Jacobian: ",L_2)
            Jacobian_NN = calculate_jacobian_full(inputs, outputs_NN)
            Jacobian_output = torch.einsum("ca,nab->ncb",self.Decoder_matrix, Jacobian_NN.detach() )
            
            Frobenius_norm = calulate_matrix_norm_square(output_grad_PDE, Jacobian_output, self.Mass_matrix) 
            A_T_M_A = torch.einsum("bmi, mk, bkj->bij", output_grad_PDE, self.Mass_matrix, output_grad_PDE)
            true_matrix_norm = torch.einsum("bii->b", A_T_M_A) + 1e-8
            H1 = 1 - torch.sqrt(torch.sum(Frobenius_norm/true_matrix_norm))
            print("H1 accuracy : ", H1)
            
        #torch.save(model, "./saved_model/model_jacobian_full.pth")
        
    